import telebot
import requests
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


# üîê –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∫–ª—é—á–∏
TELEGRAM_TOKEN = ""
OPENROUTER_API_KEY = ""  # https://openrouter.ai/settings

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# üîé –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    text = (
        "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
        "–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏, –∏ —è –æ—Ü–µ–Ω—é –µ—ë —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –ì–µ—Ä–º–∞–Ω–∏–∏ (–≤ –µ–≤—Ä–æ).\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∏–∂–µ üëá"
    )

    # –°–æ–∑–¥–∞—ë–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton("üíª –£—Å–ª—É–≥–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∞–π—Ç–∞", callback_data="template_website")
    markup.row(btn1)
    btn2 = InlineKeyboardButton("üí∂ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É", callback_data="template_pricing"),
    btn3 = InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω", callback_data="template_booking")
    markup.row(btn2, btn3)

    bot.send_message(
        message.chat.id,
        text,
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data == "template_website":
        user_input = "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"
    elif call.data == "template_pricing":
        user_input = "–¶–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –Ω–∞ —É—Å–ª—É–≥–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏"
    elif call.data == "template_booking":
        user_input = "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Ä–º–∏–Ω?"

    # –î–∞–ª—å—à–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–∞–º
    # –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—É, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ò–ò)


# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_input = message.text.strip()

    prompt = f"""
    –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä—ã–Ω–∫—É —É—Å–ª—É–≥ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏.

    –û—Ü–µ–Ω–∏ —Ä—ã–Ω–æ—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –Ω–∞ —É—Å–ª—É–≥—É, –æ–ø–∏—Å–∞–Ω–Ω—É—é –Ω–∏–∂–µ, —Å—Ç—Ä–æ–≥–æ –≤ –µ–≤—Ä–æ (‚Ç¨).

    –û—Ç–≤–µ—á–∞–π –ø—Ä—è–º–æ –∏ –≤ –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–π :
   
    –°–≤–æ–µ –º–Ω–µ–Ω–∏–µ –≤ –°–∫–æ–±–∫–∞—Ö
    
    –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –±–µ–∑ –≤–æ–¥—ã —Å–æ –∑–Ω–∞–∫–æ–º –µ–≤—Ä–æ –≤ –∫–æ–Ω—Ü–µ.

    –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:
    ¬´{user_input}¬ª
    """

    # üì° –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "mistralai/mistral-7b-instruct",  # –ë—ã—Å—Ç—Ä–∞—è –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
        "messages": [{"role": "user", "content": prompt}],
    }

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload
        )
        data = response.json()
        reply = data["choices"][0]["message"]["content"]
        bot.send_message(message.chat.id, reply)
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò.")
        print("–û—à–∏–±–∫–∞:", e)

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞3
bot.polling(none_stop=True)
